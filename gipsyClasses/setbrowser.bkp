# -*- coding: utf-8 -*-
import sys
import functools
from PyQt4.QtCore import *
from PyQt4.QtGui import *


from Ui_setbrowser import *
from gipsyClasses.gipsySet import *
from general import *

from new_exceptions import *



class setbrowser(QDialog, Ui_setbrowser):
    def __init__(self, filename, subset,  box):
        super(setbrowser, self).__init__()
        self.setPath=None
        self.axesInfo=None
        self.axesList=None
        self.setupUi(self)
        self.subButtons={}
        self.boxButtons={}
        self.groupCheckBox={}
        self.limitLabel={}
        self.RangeListEdit={}
        
        
        self.buttonBox.button(QDialogButtonBox.Ok).setAutoDefault(False)
        self.buttonBox.button(QDialogButtonBox.Ok).setDefault(False)
        self.buttonBox.button(QDialogButtonBox.Cancel).setAutoDefault(False)
        self.buttonBox.button(QDialogButtonBox.Cancel).setDefault(False)
        self.buttonBox.button(QDialogButtonBox.Help).setAutoDefault(False)
        self.buttonBox.button(QDialogButtonBox.Help).setDefault(False)
        self.browseButton.setAutoDefault(False)
        self.browseButton.setDefault(False)
        self.headerButton.setAutoDefault(False)
        self.headerButton.setDefault(False)
        self.enableButton.setAutoDefault(False)
        self.enableButton.setDefault(False)
        
        #self.connect(self.okButton, SIGNAL("accepted()"), self.accept)
        #self.connect(self.cancelButton, SIGNAL("rejected()"), self.reject)
       
        self.connect(self.browseButton, SIGNAL("clicked()"), self.browser)
        self.connect(self.setnameLine, SIGNAL("returnPressed()"), self.openSetbyHand )
        
        
        
        #if filename != None and subset !="" and box !="":
        if filename != None: 
            self.setPath=filename
            set=gipsySet()
            set.loadSet(self.setPath)
            self.axesInfo=set.getInfoAxes()
            self.axesList=set.getAxes()
            del set
            
            self.subsetLine.setText(subset)
            self.boxLine.setText(box)
            #self.showDefaultAxes()
            self.clearAxesLayout()
            self.showUpdatedAxes(filename, unicode(subset),  unicode(box))
        else:
            self.showDefaultAxes()
    
        self.connect(self.subsetLine,  SIGNAL("textEdited(QString)"), self.disableComposer)
        self.connect(self.boxLine,  SIGNAL("textEdited(QString)"), self.disableComposer)
        self.connect(self.enableButton, SIGNAL("clicked()"),  self.enableComposer)
        
        
        
    def disableComposer(self, string):
        self.enableButton.setEnabled(True)
        self.axisFrame.setEnabled(False)
    
    def enableComposer(self):
        self.enableButton.setEnabled(False)
        self.axisFrame.setEnabled(True)
        self.updateLines()
        
    def openSetbyHand(self):
        self.buttonBox.button(QDialogButtonBox.Ok).setAutoDefault(False)
        self.buttonBox.button(QDialogButtonBox.Ok).setDefault(False)
        self.buttonBox.button(QDialogButtonBox.Cancel).setAutoDefault(False)
        self.buttonBox.button(QDialogButtonBox.Cancel).setDefault(False)
        self.buttonBox.button(QDialogButtonBox.Help).setAutoDefault(False)
        self.buttonBox.button(QDialogButtonBox.Help).setDefault(False)
       
       
        filename=unicode(self.setnameLine.text())
        if "/" not in filename:
            setname=os.getcwd()+"/"+filename
            filename=os.getcwd()+"/"+filename+".image"
           
        else:
            setname=filename
            filename=filename+".image"
            
        
        if not os.path.exists(filename):
            self.clearAxesLayout()
            self.axesLayout.addWidget(QLabel("The set does not exist %s"%setname), 0, 0)
        else:
            
            self.setPath=setname
            set=gipsySet()
            set.loadSet(self.setPath)
            self.axesInfo=set.getInfoAxes()
            self.axesList=set.getAxes()
            del set
            self.clearAxesLayout()
            self.showDefaultAxes()
            
    def browser(self):
        dir = os.path.dirname(".")
        fName = unicode(QFileDialog.getOpenFileName(self, "File open ", dir,SETFORMAT))
        if (fName==""):
            return
        self.setPath=unicode(os.path.splitext(fName)[0])
        set=gipsySet()
        set.loadSet(self.setPath)
        self.axesInfo=set.getInfoAxes()
        self.axesList=set.getAxes()
        del set
        self.clearAxesLayout()
        self.showDefaultAxes()
    
    def clearAxesLayout(self):
              #delete all extraLayout
        while self.axesLayout.count()>0:
            item=self.axesLayout.takeAt(0)
            if item != None:
                l=item.layout()
                if l:
                    while l.count()>0:
                        item2=l.takeAt(0)
                        if item2 !=None:
                            w2=item2.widget()
                            if w2:
                                
                                w2.deleteLater()
                else:
                    w=item.widget()
                    if w:
                        
                        w.deleteLater()
                        
    def showDefaultAxes(self):
        if self.setPath==None:
            return
        self.setnameLine.setText(self.setPath)
        
        subsetText=os.path.basename(self.setPath)+" "
        boxtext=""
        xbox=[]
        ybox=[]
        for i, axe in enumerate(self.axesInfo):
            (axename, range)=axe
            if i<2:
                x, y=range.split()
                xbox.append(x)
                ybox.append(y)
            else:
                subsetText=subsetText+" "+axename
        for x in xbox:
            boxtext=boxtext+" "+x
        for y in ybox:
            boxtext=boxtext+" "+y
        
        self.subsetLine.setText(subsetText)
        self.boxLine.setText(boxtext)
        self.axesLayout.addWidget(QLabel("Name"), 0, 0)
        self.axesLayout.addWidget(QLabel("Data"), 0, 1)
        self.axesLayout.addWidget(QLabel("Repeat"), 0, 2)        
        l=QLabel("Range/List")
        l.setAlignment(Qt.AlignCenter)
        self.axesLayout.addWidget(l, 0, 3, 1, 2)
        self.axesLayout.addWidget(QLabel("Default"), 0, 5)
        frame = QtGui.QFrame()
        line = QtGui.QFrame(frame)
        line.setFrameShape(QtGui.QFrame.HLine)
        line.setFrameShadow(QtGui.QFrame.Sunken)
        self.axesLayout.addWidget(line, 1, 0, 1, 6)
      
        for i, axe in enumerate(self.axesInfo):
            try:
                (axename, range)=axe
                (x, y)=range.split()
            except:
                raise gipsyException("Unable read set axes limit")
                return
            
            self.axesLayout.addWidget(QLabel(QString(axename)), i+2, 0)
            self.groupCheckBox[i]=QButtonGroup()
            box=QRadioButton(QString(""))
            sub=QRadioButton(QString(""))
            if (i <2):
                box.setChecked(True)
                self.groupCheckBox[i].addButton(box, 0)
                self.groupCheckBox[i].addButton(sub, 1)
                self.axesLayout.addWidget(box, i+2, 1)
                self.axesLayout.addWidget(sub, i+2, 2)
               
                
                lowRange=QLineEdit()
                lowRange.setMaximumSize(QtCore.QSize(50, 16777215))
                self.connect(lowRange, SIGNAL("textChanged(QString)"), self.updateLines)
                highRange=QLineEdit()
                highRange.setMaximumSize(QtCore.QSize(50, 16777215))
                self.connect(highRange, SIGNAL("textChanged(QString)"), self.updateLines)
                self.RangeListEdit[i]=(lowRange, highRange)
                self.axesLayout.addWidget(lowRange, i+2, 3)
                self.axesLayout.addWidget(highRange, i+2, 4)
                Label=QLabel(QString("["+x+","+y+"]"))
                self.limitLabel[i]=Label
                self.axesLayout.addWidget(Label, i+2, 5)
                
            if (i >1):
                sub.setChecked(True)
                self.groupCheckBox[i].addButton(box, 0)
                self.groupCheckBox[i].addButton(sub, 1)
                self.axesLayout.addWidget(box, i+2, 1)
                self.axesLayout.addWidget(sub, i+2, 2)
                list=QLineEdit()
                list.setMaximumSize(QtCore.QSize(150, 16777215))
                self.connect(list, SIGNAL("textChanged(QString)"), self.updateLines)
                self.RangeListEdit[i]=list
                self.axesLayout.addWidget(list, i+2, 3, 1, 2)
                Label=QLabel(QString("{"+x+":"+y+"}"))
                self.limitLabel[i]=Label
                self.axesLayout.addWidget(Label, i+2, 5)
                
            curried = functools.partial(self.changeRangeList,i)
            self.connect(self.groupCheckBox[i],SIGNAL("buttonClicked(int)"),   curried)
        
       #self.connect(self.enableButton,SIGNAL("buttonClicked(int)"),   self.enableComposer)
            

    def updateLines(self):
        
        perror=QPalette() #Error palette
        perror.setColor(QPalette.Base, QColor(255, 0,0))
        p=QPalette() #write palette
        p.setColor(QPalette.Base, QColor(255, 255,255))
        subsettext=os.path.basename(self.setPath)+" "
        xbox=[]
        ybox=[]
        for i, axe in enumerate(self.axesInfo):
            (axename, range)=axe
            limitx=int(range.split()[0])
            limity=int(range.split()[1])
            group=self.groupCheckBox[i]
            buttonSub=group.button(1)
            if buttonSub.isChecked():
                list=unicode(self.RangeListEdit[i].text()).split()
                isok=True
                for item in list:
                    if ":" in item:
                        for item2 in item.split(":"):
                            if item2!="":
                                try:
                                    item2=int(item2)
                                except:
                                    self.RangeListEdit[i].setPalette(perror)
                                    self.RangeListEdit[i].setToolTip(ERROR_SETBROWSER['syntax'])
                                    isok=False
                                else:
                                    if item2>limity or item2<limitx:
                                        self.RangeListEdit[i].setPalette(perror)
                                        self.RangeListEdit[i].setToolTip(ERROR_SETBROWSER['overflow'])
                                        isok=False
                    else:
                        try:
                            item=int(item)
                        except:
                            self.RangeListEdit[i].setPalette(perror)
                            self.RangeListEdit[i].setToolTip(ERROR_SETBROWSER['syntax'])
                            isok=False
                        else:
                            if item>limity or item<limitx:
                                self.RangeListEdit[i].setPalette(perror)
                                self.RangeListEdit[i].setToolTip(ERROR_SETBROWSER['overflow'])
                                isok=False
                                
                if isok:
                    subsettext=subsettext+unicode(axename)+" "+unicode(self.RangeListEdit[i].text())+" "
                    self.RangeListEdit[i].setPalette(p)
                    self.RangeListEdit[i].setToolTip("")
                
               
            else:
                (lowLine, highLine)=self.RangeListEdit[i]
                x=unicode(lowLine.text())
                y=unicode(highLine.text())
               
                if x!="":
                    try:
                        x=int(x)
                    except:
                        lowLine.setPalette(perror)
                        lowLine.setToolTip(ERROR_SETBROWSER['syntax'])
                        xbox.append(range.split()[0])
                        
                    else:
                        if x < limitx or x > limity:
                            lowLine.setPalette(perror)
                            lowLine.setToolTip(ERROR_SETBROWSER['overflow'])
                            xbox.append(range.split()[0])
                        else:
                            lowLine.setPalette(p)
                            lowLine.setToolTip("")
                            xbox.append(str(x))
                else:
                   xbox.append(range.split()[0])
                   lowLine.setPalette(p)
                   lowLine.setToolTip("")
                if y!="":
                    try:
                        y=int(y)
                    except:
                        highLine.setPalette(perror)
                        highLine.setToolTip(ERROR_SETBROWSER['syntax'])
                        ybox.append(range.split()[1])
                        
                    else:
                        if y >limity or y< limitx:
                            highLine.setPalette(perror)
                            highLine.setToolTip(ERROR_SETBROWSER['overflow'])
                            ybox.append(range.split()[1])
                        else:
                            highLine.setPalette(p)
                            highLine.setToolTip("")
                            ybox.append(str(y))
                    
                        
                        
                else:
                    ybox.append(range.split()[1])
                    highLine.setPalette(p)
                    highLine.setToolTip("")
               
        
        self.subsetLine.setText(subsettext)
        boxtext=""
        for x in xbox:
            boxtext=boxtext+" "+x
        for y in ybox:
            boxtext=boxtext+" "+y
        self.boxLine.setText(boxtext)
        
        
    def showUpdatedAxes(self, filename, subset, box):
        
        subsetList=subset.split()
        boxList=box.split()
        
        self.subsetLine.setText(subset)
        self.boxLine.setText(box)
        self.setnameLine.setText(filename)
        
        self.axesLayout.addWidget(QLabel("Name"), 0, 0)
        self.axesLayout.addWidget(QLabel("Data"), 0, 1)
        self.axesLayout.addWidget(QLabel("Repeat"), 0, 2)        
        l=QLabel("Range/List")
        l.setAlignment(Qt.AlignCenter)
        self.axesLayout.addWidget(l, 0, 3, 1, 2)
        self.axesLayout.addWidget(QLabel("Default"), 0, 5)
        frame = QtGui.QFrame()
        line = QtGui.QFrame(frame)
        line.setFrameShape(QtGui.QFrame.HLine)
        line.setFrameShadow(QtGui.QFrame.Sunken)
        self.axesLayout.addWidget(line, 1, 0, 1, 6)
       
        n_box=0
        for i, axe in enumerate(self.axesInfo):
            try:
                (axename, range)=axe
                (x, y)=range.split()
            except:
                raise gipsyException("Unable read set axes limit")
                return
            
            self.axesLayout.addWidget(QLabel(QString(axename)), i+2, 0)
            self.groupCheckBox[i]=QButtonGroup()
            box=QRadioButton(QString(""))
            sub=QRadioButton(QString(""))
            if axename not in subsetList:
                n_box +=1
                box.setChecked(True)
                self.groupCheckBox[i].addButton(box, 0)
                self.groupCheckBox[i].addButton(sub, 1)
                self.axesLayout.addWidget(box, i+2, 1)
                self.axesLayout.addWidget(sub, i+2, 2)
               
                
                lowRange=QLineEdit()
                lowRange.setMaximumSize(QtCore.QSize(50, 16777215))
                self.connect(lowRange, SIGNAL("textChanged(QString)"), self.updateLines)
                highRange=QLineEdit()
                highRange.setMaximumSize(QtCore.QSize(50, 16777215))
                self.connect(highRange, SIGNAL("textChanged(QString)"), self.updateLines)
                self.RangeListEdit[i]=(lowRange, highRange)
                self.axesLayout.addWidget(lowRange, i+2, 3)
                self.axesLayout.addWidget(highRange, i+2, 4)
                Label=QLabel(QString("["+x+","+y+"]"))
                self.limitLabel[i]=Label
                self.axesLayout.addWidget(Label, i+2, 5)
                
            else:
                sub.setChecked(True)
                self.groupCheckBox[i].addButton(box, 0)
                self.groupCheckBox[i].addButton(sub, 1)
                self.axesLayout.addWidget(box, i+2, 1)
                self.axesLayout.addWidget(sub, i+2, 2)
                j=subsetList.index(axename)
                tmp=""
                while (len(subsetList)> j+1):
                    if subsetList[j+1] not in self.axesList:
                        #tmp=unicode(self.RangeListEdit[i].text())
                        tmp=tmp+" "+unicode(subsetList[j+1])
                        #self.RangeListEdit[i].setText(tmp)
                    else:
                        
                        break
                    j=j+1
                list=QLineEdit(tmp)
                list.setMaximumSize(QtCore.QSize(150, 16777215))
                self.connect(list, SIGNAL("textChanged(QString)"), self.updateLines)
                self.RangeListEdit[i]=list
                self.axesLayout.addWidget(list, i+2, 3, 1, 2)
                Label=QLabel(QString("{"+x+":"+y+"}"))
                self.limitLabel[i]=Label
                self.axesLayout.addWidget(Label, i+2, 5)
                self.axesLayout.addWidget(Label, i+2, 5)
                
            curried = functools.partial(self.changeRangeList,i)
            self.connect(self.groupCheckBox[i],SIGNAL("buttonClicked(int)"),   curried)
        
        j=0
        for i,  axe in enumerate(self.axesInfo):
            b=self.groupCheckBox[i].button(0)
            if b.isChecked():
                if len(boxList)> j+n_box:
                    (lowLine,  highLine)=self.RangeListEdit[i]
                    lowLine.setText(boxList[j])
                    highLine.setText(boxList[j+n_box])
                j +=1 
        #self.connect(self.enableButton,SIGNAL("buttonClicked(int)"),   self.enableComposer)

        
        
    def changeRangeList(self, key, id):
       
        try:
            (axename, range)=self.axesInfo[key]
            (x, y)=range.split()
        except:
            raise gipsyException("Unable read set axes limit")
            return

        group=self.groupCheckBox[key]
        buttonSub=group.button(0)
        if buttonSub.isChecked():
            lineedit=self.RangeListEdit[key]
            lineedit.hide()
            del lineedit
            lowRange=QLineEdit()
            lowRange.setMaximumSize(QtCore.QSize(50, 16777215))
            self.connect(lowRange, SIGNAL("textChanged(QString)"), self.updateLines)
            highRange=QLineEdit()
            highRange.setMaximumSize(QtCore.QSize(50, 16777215))
            self.connect(highRange, SIGNAL("textChanged(QString)"), self.updateLines)
            self.RangeListEdit[key]=(lowRange, highRange)
            self.axesLayout.addWidget(lowRange, key+2, 3)
            self.axesLayout.addWidget(highRange, key+2, 4)
            
            label=self.limitLabel[key]
            label.hide()
            del label
            
            Label=QLabel(QString("["+x+","+y+"]"))
            self.limitLabel[key]=Label
            self.axesLayout.addWidget(Label, key+2, 5)
            
        else:
            (lowedit, highedit)=self.RangeListEdit[key]
            lowedit.hide()
            highedit.hide()
            del lowedit
            del highedit
            list=QLineEdit()
            list.setMaximumSize(QtCore.QSize(150, 16777215))
            self.connect(list, SIGNAL("textChanged(QString)"), self.updateLines)
            self.RangeListEdit[key]=list
            self.axesLayout.addWidget(list, key+2, 3, 1, 2)
            label=self.limitLabel[key]
            label.hide()
            del label
            Label=QLabel(QString("{"+x+":"+y+"}"))
            self.limitLabel[key]=Label
            self.axesLayout.addWidget(Label, key+2, 5)
                
        
        self.updateLines()
