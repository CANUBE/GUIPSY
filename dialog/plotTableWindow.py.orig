from PyQt4.QtCore import *
from PyQt4.QtGui import *
import matplotlib
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QTAgg as NavigationToolbar
from matplotlib.figure import Figure

#import Ui_plotTableDlg
from Ui_plotTableWindow import *
from Ui_editPlotDlg import *
import resources_rc

COLOR={'Blue':'b', 'Green':'g', 'Red':'r', 'Cyan':'c', 'Magenta':'m', 'yellow':'y', 'black':'k', 'white':'w'}
STYLE={'Solid Line':'-', 'Dashed Line':'--', 'Dash-Dot Line':'-.',  'Dotted Line':':'}

#class editPlotDlg(QDialog,Ui_editPlotDlg):
#    def __init__(self, p, parent=None):
#        super(editPlotDlg, self).__init__(parent)
#        self.setupUi(self)
#        if(p.color!=None):
#            i=self.colorList.findText(p.color)
#            if(i!=-1):
#                self.colorList.setCurrentIndex(i)
#        if(p.style!=None):
#            i=self.styleList.findText(p.style)
#            if(i!=-1):
#                self.styleList.setCurrentIndex(i)
#        if(p.label!=None):
#            self.plotLabel.setText(p.label)
        
        
        
       

class plot:
    def __init__(self, label, XAxis, YAxis, XError=None, YError=None, color=None, style=None):
        self.label=label
        self.xAxis=XAxis
        self.yAxis=YAxis
        self.color=color
        self.style=style
        self.xError=XError
        self.yError=YError
        

class plotTableWindow(QMainWindow,Ui_plotTableWindow):
    def __init__(self, view_tables, currentTable, parent=None):
        super(plotTableWindow, self).__init__(parent)
        self.setupUi(self)
        self.plots={}
        self.view_tables=view_tables
        
        #Adding a empty plot figure
        self.dpi = 100
        self.fig = Figure((6.0, 4.0), dpi=self.dpi)
        self.canvas = FigureCanvas(self.fig)
        self.canvas.setParent(self.plot_frame)
        self.axes = self.fig.add_subplot(111)
        self.mpl_toolbar = NavigationToolbar(self.canvas, self.plot_frame)
        self.plot_frame_Layout.addWidget(self.canvas)
        self.plot_frame_Layout.addWidget(self.mpl_toolbar)
       
    
        #Generating  table list comboBox

        for key, val in view_tables.iteritems():
          self.tableList.addItem(key, QVariant(key))
    
        i=self.tableList.findText(QString(currentTable))
        if(i!=-1):
            self.tableList.setCurrentIndex(i)
        
        #Generating  X/Y Axis list comboBox
       
        columnTitles=self.view_tables[currentTable].getColumnTitles()
        numericColumns=self.view_tables[currentTable].getNumericColumns()
        for index, title in enumerate(columnTitles):
            if numericColumns[index]:
                self.XAxis.addItem(title, QVariant(index))
                self.YAxis.addItem(title, QVariant(index))
                self.XError.addItem(title, QVariant(index))
                self.YError.addItem(title, QVariant(index))

                
        
        #Connecting add button
        self.connect(self.addButton,SIGNAL("clicked()"), self.addPlot)
        #self.connect(self.editPlotButton,SIGNAL("clicked()"), self.editPlot)
        self.connect(self.delPlotButton,SIGNAL("clicked()"), self.delPlot)
        self.connect(self.plotButton,SIGNAL("clicked()"), self.plot)
        self.connect(self.showLegendBox, SIGNAL("stateChanged(int)"), self.enableLegend)
        self.connect(self.xerrorCheck, SIGNAL("stateChanged(int)"), self.enableXErrorBars)
        self.connect(self.yerrorCheck, SIGNAL("stateChanged(int)"), self.enableYErrorBars)
        #Connecting tableList
        self.connect(self.tableList, SIGNAL("currentIndexChanged(QString)"),self.updateColumnsList)
        
        #Connecting legend function
        self.connect(self.positionCombo,  SIGNAL("currentIndexChanged(int)"), self.enablePosition)
        
        self.positionCombo.setCurrentIndex(1) #Best
        self.textSizeSpin.setValue(12)
        self.ncolSpin.setValue(1)

    def enablePosition(self, position):
        if position == 0:
            self.xposSpin.setEnabled(True)
            self.yposSpin.setEnabled(True)

        else:
            self.xposSpin.setEnabled(False)
            self.yposSpin.setEnabled(False)
        
    def addPlot(self):
       
        if(self.plotLabel.text()!=""):
            p=QPalette()
            p.setColor(QPalette.Base, QColor(255,255,255))
            self.plotLabel.setPalette(p)
            plabel=unicode(self.plotLabel.text())
            self.plotList.addItem(plabel)
            xcol=self.XAxis.itemData(self.XAxis.currentIndex()).toInt()[0]
            ycol=self.YAxis.itemData(self.YAxis.currentIndex()).toInt()[0]
            
            
            xcol=int(xcol)
            ycol=int(ycol)
            table=unicode(self.tableList.itemData(self.tableList.currentIndex()).toString())
          
            xaxis=self.view_tables[table].getColumn(xcol)
            yaxis=self.view_tables[table].getColumn(ycol)
            
            xerror=None
            yerror=None
            if self.xerrorCheck.checkState()==Qt.Checked:
                xerrcol=self.XError.itemData(self.XError.currentIndex()).toInt()[0]
                xerrcol=int(xerrcol)
                xerror=self.view_tables[table].getColumn(xerrcol)
            if self.yerrorCheck.checkState()==Qt.Checked:
                yerrcol=self.YError.itemData(self.YError.currentIndex()).toInt()[0]
                yerrcol=int(yerrcol)
                yerror=self.view_tables[table].getColumn(yerrcol)
                
            newplot=plot(plabel, xaxis, yaxis, xerror, yerror)
            self.plots[plabel]=newplot
            
            
        else:
            
            p=QPalette()
            p.setColor(QPalette.Base, QColor(255,0,0))
            self.plotLabel.setPalette(p)
            


        
    def editPlot(self):
        if(len(self.plotList.selectedItems())==1):
            plot_selected=self.plotList.selectedItems()[0]
           
            if(plot_selected!=None):
                plabel=unicode(plot_selected.text())
            
            Dlg=editPlotDlg(self.plots[plabel], self)
            if Dlg.exec_(): 
                self.plots[plabel].label=Dlg.plotLabel.text()
                self.plots[plabel].color=Dlg.colorList.currentText()
                self.plots[plabel].style=Dlg.styleList.currentText()
                return
            
    def delPlot(self):
        if(len(self.plotList.selectedItems())==1):
            plot_selected=self.plotList.selectedItems()[0]
            
            if(plot_selected!=None):
                plabel=plot_selected.text()
                del self.plots[unicode(plabel)]
                item=self.plotList.findItems(plabel, Qt.MatchExactly)
               
                if(len(item)==1):
                    r=self.plotList.row(item[0])
                    i=self.plotList.takeItem(r)
                    del i
            self.plot()
        
        

    def plot(self):
    
#        title=unicode(self.title.text())
#        xlabel=unicode(self.XLabel.text())
#        ylabel=unicode(self.YLabel.text())
        
        
        self.axes.clear()
#        self.axes.set_title(title)
#        self.axes.set_xlabel(xlabel)
#        self.axes.set_ylabel(ylabel)
        
        

      
        for key, value in self.plots.iteritems():
            x=value.xAxis
            y=value.yAxis
            l=unicode(value.label)
            style=value.style
            color=value.color
            xerror=value.xError
            yerror=value.yError
            if xerror!=None or yerror!=None:
                line=self.axes.errorbar(x, y,  xerr=xerror, yerr=yerror, fmt=None, label=l, color='b', ecolor='r')
            #else:
                
            line=self.axes.plot(x, y, label=l)[0]
            
            if(style!=None):
                line.set_linestyle(STYLE[unicode(style)])
            if(color!=None):
                line.set_color(COLOR[unicode(color)])
        
        #Build the legend
        if self.legendFrame.isEnabled():
            pos=None
            if self.xposSpin.isEnabled():
                xpos=self.xposSpin.value()
                ypos=self.yposSpin.value()
                pos=(xpos,  ypos)
            else:
                pos=unicode(self.positionCombo.currentText())
            
            title=self.titleLine.text()
            ncol=self.ncolSpin.value()
            textsize=self.textSizeSpin.value()
            if self.fancyBox.checkState() == Qt.Unchecked:
                fancy=False
            else:
                fancy=True
            
            if self.shadowBox.checkState() == Qt.Unchecked:
                shadow=False
            else:
                shadow=True
            
            self.axes.legend(loc=pos, title=title,  ncol=ncol,fancybox=fancy , shadow=shadow,  prop={'size':textsize} )
        self.canvas.draw()

    def updateColumnsList(self,item):
        if item:
            currentTable=unicode(item)
            columnTitles=self.view_tables[currentTable].getColumnTitles()
            numericColumns=self.view_tables[currentTable].getNumericColumns()
            self.XAxis.clear()
            self.YAxis.clear()
            self.XError.clear()
            self.YError.clear()
            for index, title in enumerate(columnTitles):
                if numericColumns[index]:
                    self.XAxis.addItem(title, QVariant(index))
                    self.YAxis.addItem(title, QVariant(index))
                    self.XError.addItem(title, QVariant(index))
                    self.YError.addItem(title, QVariant(index))


    def enableLegend(self, state):
        if state==Qt.Checked:
            self.legendFrame.setEnabled(True)
        else:
            self.legendFrame.setEnabled(False)
            
    def enableXErrorBars(self, state):
        if state==Qt.Checked:
            self.XError.setEnabled(True)
        else:
            self.XError.setEnabled(False)
    
    def enableYErrorBars(self, state):
        if state==Qt.Checked:
            self.YError.setEnabled(True)
        else:
            self.YError.setEnabled(False)
            
