from PyQt4.QtCore import *
from PyQt4.QtGui import *
import functools

from Ui_gipsySet import *
from dialog.myeditarea import MyEditArea
from gipsySet import *
from dialog.historyDlg import *
from dialog.gipsyHeadersDlg import *
 

    

class view_gipsySet(QScrollArea,Ui_setWidget):
    
    """ This class is a subclass of Ui_gipsySet. The Ui_gipsySet class contains the graphical part
    and view_gipsySet class contains the operational part. 
    This class provides the view to show the information set and the methods for interacting with
    the set.
    
    Parameters
    -----------------
    setname: String
        The pathname of the set
    fitsname: String, Optional
        The pathname of the fits file containing the set. 
    
    Attributes
    ---------------
    gSet: gipsySet
        It is an instance of gipsySet class. This class implement the interaction 
        with gipsy software.
    setname: String
        Pathname of the set
    fitsname: String
        Pathname of the set
        
    commentsArea: MyEditArea(QTextEdit)
        Inherited from UI_gipsySet class
    PropertiesText: QTextEdit
         Inherited from UI_gipsySet class
    historyButton: QPushButton
         Inherited from UI_gipsySet class
    headerButton: QPushButton
         Inherited from UI_gipsySet class
    
    """
    def __init__(self, setname,  fitsname=None):
        super(view_gipsySet, self).__init__()
        self.setupUi(self)
        self.gSet=gipsySet()
        self.setname=setname
        self.fitsname=fitsname
        
    def load(self):
        """Load a gipsy set. It could be loaded from a fits file or directly from a set file.
        Reads the properties and comments of the set and then it displays them in the 
        corresponding fields of the view
        
        Returns
        ------------
        output: String
            Return the log obtained from load the set
        
        Raises
        ---------
        gipsyException
            Raise a gipsyException when gets some error accesing to the set
        """
    
        try:
            log=self.gSet.loadSet(self.setname,self.fitsname)
        except gipsyException as g:
            raise g
            return
        
        
        #Adding the comment Area
        self.commentsArea=MyEditArea()
        self.commentsArea.setReadOnly(False)
	self.commentsArea.setMaximumHeight(50)
        sizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.commentsArea.setSizePolicy(sizePolicy)
        self.horizontalLayout.addWidget(self.commentsArea)
        self.connect(self.commentsArea, SIGNAL("editingFinished"),self.emitCommentsChanged)
        self.connect(self.historyButton,  SIGNAL("clicked()"), self.emitShowHistory)
        self.connect(self.headerButton,  SIGNAL("clicked()"), self.showHeaders)
        
        try:
            #self.PropertiesText.setText(str(self.gSet.getProperties()))
	    text=str(self.gSet.getProperties())
	    self.PropertiesText.insertHtml("<pre>"+text+"</pre>")
        except gipsyException as g:
            raise g
            return
            
        try:
           self.commentsArea.setText(str(self.gSet.getComments()))
        except gipsyException as g:
            raise g
            return
        
        return log
   
    def delete(self):
        log=""
        try:
            log=self.gSet.deleteSet()
        except gipsyException as g:
            raise g
            return log
        
        return log
        

    def emitCommentsChanged(self):
        """Update the comments when the editing finish in the comments text area.
        Emit the corresponding signal with the log as parameter in order to update workflow text"""
        comments=self.commentsArea.toPlainText()
        log=self.gSet.updateComments(comments)
        self.emit(SIGNAL("commentsChanged(log)"), log)
  

    
    def emitShowHistory(self):
        """Show in a dialog the history text of the set
        Raises
        --------
        gipsyException
        Raise a gipsyException when gets some error accesing to the set
         """
        try:
            history=self.gSet.getHistory()
        except gipsyException as g:
            QMessageBox.warning(self, "Show history failed", QString(g.msj))
            return
        
        if(history=="") : 
            history="There is not any HISTORY item "

        Dlg=historyDlg(history)
        Dlg.exec_()
        
        
    def showHeaders(self):
        """Show in a dialg a form with the header items. This form allow edit/delete and add header items.
        When the dialog is closed, it update the header items properly
        Raises
        ---------
        gipsyException
        Raise a gipsyException when gets some error accesing to the set
        """
        try:
            items=self.gSet.getHeaderItems()
        except gipsyException as g:
            QMessageBox.warning(self, "Read Header Set Failed", QString(g.msj))
            return
        ghd=gipsyHeadersDlg(items)
        ghd.load()
        if ghd.exec_():
            log=""
            newItems=ghd.getItems()
            for key, value in items:
                if not newItems.has_key(key):
                    try:
                        log=log+"\n"+self.gSet.deleteHeaderKey(key)
                    except gipsyException as g:
                        QMessageBox.warning(self, "Delete Header Item Failed", QString(g.msj))
                        return
                   
                else:
                    if value!= newItems[key]:
                        
                        try:
                            log=log+"\n"+self.gSet.updateHeaderKey(key, str(newItems[key]))
                        except gipsyException as g:
                            QMessageBox.warning(self, "Update Header Item Failed ", QString(g.msj))
                            return
                    del newItems[key]
            
            for key,  value in newItems.iteritems():
                    try:
                        log=log+"\n"+self.gSet.newHeaderKey(str(key), str(value))
                    except gipsyException as g:
                        QMessageBox.warning(self, "Add New Header Item Failed", QString(g.msj))
                        return
            self.emit(SIGNAL("headersChanged(log)"), log)
            

    
    def getInfo(self):
        """Return some information about the set: the size in KB, the dimension and the axes
        
        Returns
        -----------
        output: String
            The size in KB, the dimension and the axes of the set
        """
        #Get the size of the file
        try:
            size=os.path.getsize(self.setname+".image")
        except OSError:
            return
        
        output=str(size/1024)+" KBytes\n"
        output=output+self.gSet.getInfo()
        return output
    def getTablesInfo(self):
	return self.gSet.getTablesInfo()

    def getTableData(self,numTable):
	return self.gSet.getTableData(numTable)

	
